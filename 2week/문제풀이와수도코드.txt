1번. 9461

1) 이 문제는 메모이제이션(Memoization)을 사용하여 중복 계산을 피하고, 재귀적으로 파도반 수열을 계산합니다. 

2) 1. Long형 배열인 seq를 크기 101로 초기화한다.(seq[0]부터 seq[3]까지는 미리 계산된 값으로 초기화한다.)
   2. Scanner 객체를 생성하여 사용자 입력을 읽는다.
   3. 테스트 케이스의 개수 T를 입력받는다.
   4. T개의 반복문을 실행하여 다음 작업을 수행한다.
       1. 정수 N을 입력받는다. (n번째 항)
       2. padovan 메소드를 호출하여 N번째 항을 구하고 출력한다.
   5. padovan 메소드를 선언한다:
       1. 만약 seq 배열의 N번째 항이 미리 계산된 경우에는 저장된 값을 반환한다.
       2. seq[N]이 null인 경우, padovan(N - 2) + padovan(N - 3)을 계산하여 seq[N]에 저장한 후 반환한다.

2번. 11047

1) 이 문제는 그리디 알고리즘을 이용해서 N개의 동전 중 가장 큰 가치를 지닌 동전부터 탐색하여 동전의 가치가 K보다 클 경우는 넘어가고, 
   아닐경우는 최대 구성 가능한 개수를 더해주는 식으로 접근했습니다. 

 
2) 1. Scanner 객체를 생성하여 사용자 입력을 읽는다.
   2. 정수 N과 K를 입력받는다. (N은 동전의 종류의 개수, K는 거스름돈의 금액)
   3. 크기가 N인 int형 배열 coin을 생성하고, for문을 사용하여 N개의 동전의 가치를 입력받는다.
   4. 변수 count를 0으로 초기화한다.
   5. for문을 사용하여 다음 작업을 수행한다.
      1. i번째 동전의 가치가 K이하인 경우에 다음을 실행한다.
      2. i번째 동전으로 거스름돈을 최대한 많이 지불한다. (K / coin[i]만큼 count를 증가시킨다)
      3. 남은 거스름돈(K % coin[i])을 변수 K에 저장한다.
      4. for문의 조건은 i--로 동전의 가치가 높은 것부터 선택하도록 한다.

3번. 11659

1) n개의 누적합은 변하지 않으므로 한 번만 계산해놓고 필요한 부분을 뽑아서 쓰고, 입력과 동시에 i까지의 누적합을 구해서 저장한 후,
   array[j]-array[i-1]을 리턴하는 식으로 풀었습니다.

2) 1. BufferedReader와 StringTokenizer 객체를 생성하여 사용자 입력을 읽는다.
   2. 첫 번째 줄에서 정수 n과 m을 입력받는다. n은 배열의 크기, m은 구간 합을 구해야 할 횟수이다.
   3. 두 번째 줄에서 n개의 정수를 입력받는다.
   4. 크기가 n인 int형 배열 array를 생성하고, for문을 사용하여 배열의 값을 누적합(prefix sum)으로 계산한다.
   5. for문을 사용하여 m개의 구간 합을 계산한다.
   6. 각 구간 합을 계산하기 위해 a와 b를 입력받는다. (a와 b는 구간의 시작 위치와 끝 위치)
   7. array[b]에서 array[a-1]을 뺀 값을 출력한다. (전체 구간의 합)


4번. 12865

1)냅색 알고리즘은 크게 두 가지 문제로 분류 될 수 있는데, 짐을 쪼갤 수 있는 경우와 짐을 쪼갤 수 없는 경우로 나눌 수 있는데,
   이 문제는 짐을 쪼갤 수 없기 때문에 다이나믹 프로그래밍(DP)로 해결했습니다.

2) 1. 가치(V)와 무게(W)를 저장하는 int형 배열 V, W를 생성한다.
   2. dp 배열을 Integer형으로 선언하고, N x (K+1) 크기로 초기화한다. dp[i][k]는 i번째 아이템을 고려하여 무게가 k만큼 남았을 때 얻을 수 있는 최대 가치이다. 초기값은 null로 설정한다.
   3. BufferedReader와 StringTokenizer 객체를 사용하여 첫 줄에서 N, K를 읽어들인다.
   4. N개의 반복문을 실행하여 다음 작업을 수행한다.
       1. StringTokenizer 객체를 사용하여 i번째 아이템의 가치와 무게를 읽어들인다.
   5. knapsack 메소드를 호출하여, N-1번째 아이템까지 고려하여 최대 가치를 계산하고 출력한다.
   6. knapsack 메소드를 선언한다:
       1. 기저 사례: 만약 i < 0인 경우(더 이상 아이템이 없음), 0을 반환한다.
       2. dp[i][k] 값이 null인 경우, 다음과 같이 계산한다:
           - 만약 i번째 아이템의 무게가 k보다 큰 경우(한계 범위를 초과하는 경우), knapsack(i-1, k)를 호출하여 이전 아이템까지 고려한 결과를 반환한다.
           - 그렇지 않은 경우, knapsack(i-1, k)와 knapsack(i-1, k-W[i])+V[i] 중 더 큰 값을 dp[i][k]에 저장한다. 위의 두 경우 중 더 큰 값을 dp[i][k]에 저장한다.
       3. dp[i][k] 값을 반환한다.



5번. 24416

1) n의 피보나치 수를 재귀호출과 동적 프로그래밍으로 구하는 식으로 접근했습니다.

2) 1. BufferedReader와 InputStreamReader 객체를 생성하여 사용자 입력을 받는다.
   2. n을 입력받는다.
   3. fib(n)과 fibonacci(n) 함수를 호출하고 결과를 출력한다.
   4. 출력할 내용은 각각의 함수에서 사용된 횟수(count1, count2)와 함께 출력한다.