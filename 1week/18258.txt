1. 큐의 원리를 LinkedList 를 이용해서 구현했습니다.


2. BufferedReader 클래스를 사용하여 사용자 입력을 읽는다.
   StringBuilder 객체인 sb를 생성한다.
   LinkedList를 사용해 Deque 객체인 q를 초기화한다.
   정수 N을 입력받는다. (N은 수행할 명령의 개수를 의미한다)
   N번 반복하는 루프를 실행한다.
      StringTokenizer를 사용하여 문자열을 공백(" ")을 기준으로 분할하고, command 변수에 저장한다.
      command의 첫 번째 토큰을 사용하여 switch 문을 실행하여 해당 명령을 수행한다: (각 명령은 큐에서 일어나는 동작을 의미함)
      "push":
      정수 값을 큐의 맨 뒤에 추가한다.
       "pop":
      큐의 가장 앞에 있는 요소를 삭제한다.
      삭제할 요소가 없으면 -1을 sb에 추가한다.
      삭제한 요소가 있으면 해당 요소를 sb에 추가한다.
       "size":
      큐의 크기를 조회하고 sb에 추가한다.
       "empty":
      큐가 비어있다면 1을 sb에 추가한다.
      큐가 비어있지 않다면 0을 sb에 추가한다.
       "front":
      큐의 가장 앞에 있는 요소를 조회한다.
      조회할 요소가 없으면 -1을 sb에 추가한다.
      조회한 요소가 있으면 해당 요소를 sb에 추가한다.
      "back":
      큐의 가장 뒤에 있는 요소를 조회한다.
      조회할 요소가 없으면 -1을 sb에 추가한다.
      조회한 요소가 있으면 해당 요소를 sb에 추가한다.
   각 명령 수행 후, sb에 줄바꿈 문자('\n')를 추가한다.
최종 sb 값을 출력한다.